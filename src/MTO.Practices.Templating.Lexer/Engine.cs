//
//  This CSharp output file generated by Gardens Point LEX
//  Version:  1.1.2.301
//  Machine:  JUREMA
//  DateTime: 16/08/2013 17:18:20
//  UserName: Juliano
//  GPLEX input file <Engine.lex>
//  GPLEX frame file <embedded resource>
//
//  Option settings: verbose, parser, stack, minimize
//  Option settings: compressNext, persistBuffer, noEmbedBuffers
//

//
// Experimental embedded frame
// Version 1.1.0 of 11-February-2009
//
//
#define BACKUP
#define STACK
#define PERSIST
#define BYTEMODE

using System;
using System.IO;
using System.Text;
using System.Globalization;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Diagnostics.CodeAnalysis;

using QUT.GplexBuffers;
using MTO.Practices.Templating.Lexer;

namespace MTO.Practices.Templating.Lexer.StateMachine
{   
    /// <summary>
    /// Summary Canonical example of GPLEX automaton
    /// </summary>
    
#if STANDALONE
    //
    // These are the dummy declarations for stand-alone GPLEX applications
    // normally these declarations would come from the parser.
    // If you declare /noparser, or %option noparser then you get this.
    //

     public enum Tokens
    { 
      EOF = 0, maxParseToken = int.MaxValue 
      // must have at least these two, values are almost arbitrary
    }

     public abstract class ScanBase
    {
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public abstract int yylex();

        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yywrap")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yywrap")]
        protected virtual bool yywrap() { return true; }

#if BABEL
        protected abstract int CurrentSc { get; set; }
        // EolState is the 32-bit of state data persisted at 
        // the end of each line for Visual Studio colorization.  
        // The default is to return CurrentSc.  You must override
        // this if you want more complicated behavior.
        public virtual int EolState { 
            get { return CurrentSc; }
            set { CurrentSc = value; } 
        }
    }
    
     public interface IColorScan
    {
        void SetSource(string source, int offset);
        int GetNext(ref int state, out int start, out int end);
#endif // BABEL
    }

#endif // STANDALONE
    
    // If the compiler can't find the scanner base class maybe you
    // need to run GPPG with the /gplex option, or GPLEX with /noparser
#if BABEL
     public sealed partial class Scanner : ScanBase, IColorScan
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
        
        protected override int CurrentSc 
        {
             // The current start state is a property
             // to try to avoid the user error of setting
             // scState but forgetting to update the FSA
             // start state "currentStart"
             //
             get { return currentScOrd; }  // i.e. return YY_START;
             set { currentScOrd = value;   // i.e. BEGIN(value);
                   currentStart = startState[value]; }
        }
#else  // BABEL
     public sealed partial class Scanner : ScanBase
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
#endif // BABEL
        
        /// <summary>
        /// The input buffer for this scanner.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public ScanBuff Buffer { get { return buffer; } }
        
        private static int GetMaxParseToken() {
     System.Reflection.FieldInfo f = typeof(Tokens).GetField("maxParseToken");
            return (f == null ? int.MaxValue : (int)f.GetValue(null));
        }
        
        static int parserMax = GetMaxParseToken();
        
        enum Result {accept, noMatch, contextFound};

        const int maxAccept = 53;
        const int initial = 54;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;
        const int TAG = 1;
        const int TAG_ARG = 2;
        const int TAG_NAME = 3;
        const int COMMENT = 4;
        const int URL = 5;
        const int COMMAND = 6;
        const int COMMAND_ARG = 7;
        const int COMMAND_ARG_NAME = 8;
        const int COMMAND_ARG_VALUE = 9;
        const int COMMAND_CONTENT = 10;

#region user code
/*
   Using LEX to implement a simple case of the unix "wc" utility.
 */
#endregion user code

        int state;
        int currentStart = startState[0];
        int code;      // last code read
        int cCol;      // column number of code
        int lNum;      // current line number
        //
        // The following instance variables are used, among other
        // things, for constructing the yylloc location objects.
        //
        int tokPos;        // buffer position at start of token
        int tokCol;        // zero-based column number at start of token
        int tokLin;        // line number at start of token
        int tokEPos;       // buffer position at end of token
        int tokECol;       // column number at end of token
        int tokELin;       // line number at end of token
        string tokTxt;     // lazily constructed text of token
#if STACK          
        private Stack<int> scStack = new Stack<int>();
#endif // STACK

#region ScannerTables
    struct Table {
        public int min; public int rng; public int dflt;
        public sbyte[] nxt;
        public Table(int m, int x, int d, sbyte[] n) {
            min = m; rng = x; dflt = d; nxt = n;
        }
    };

    static int[] startState = new int[] {54, 76, 82, 94, 95, 98, 
        102, 103, 104, 105, 107, 0};

    static Table[] NxS = new Table[108] {
/* NxS[   0] */ new Table(0, 0, 0, null), // Shortest string ""
/* NxS[   1] */ // Shortest string "\x01"
      new Table(36, 90, 1, new sbyte[] {-1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, -1, 1, -1}),
/* NxS[   2] */ // Shortest string "\n"
      new Table(36, 90, 1, new sbyte[] {-1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, -1, 1, -1}),
/* NxS[   3] */ // Shortest string "\r"
      new Table(10, 116, 1, new sbyte[] {2, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1}),
/* NxS[   4] */ // Shortest string "/"
      new Table(36, 90, 1, new sbyte[] {-1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, -1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, -1, 1, -1}),
/* NxS[   5] */ new Table(0, 0, -1, null), // Shortest string ">"
/* NxS[   6] */ new Table(0, 0, -1, null), // Shortest string "{\x01}"
/* NxS[   7] */ new Table(0, 0, -1, null), // Shortest string "<B\t"
/* NxS[   8] */ // Shortest string "<uA"
      new Table(65, 58, -1, new sbyte[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, -1, -1, -1, -1, -1, -1, 8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8}),
/* NxS[   9] */ // Shortest string "<AA"
      new Table(65, 58, -1, new sbyte[] {9, 9, 9, 9, 9, 9, 
          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
          9, 9, 9, 9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 
          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
          9, 9, 9, 9}),
/* NxS[  10] */ // Shortest string "<mt"
      new Table(65, 58, -1, new sbyte[] {9, 9, 9, 9, 9, 9, 
          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
          9, 9, 9, 9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 
          9, 9, 9, 9, 9, 9, 9, 9, 11, 9, 9, 9, 9, 9, 9, 9, 
          9, 9, 9, 9}),
/* NxS[  11] */ // Shortest string "<mto"
      new Table(58, 65, -1, new sbyte[] {12, -1, -1, -1, -1, -1, 
          -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, -1, -1, -1, -1, -1, 
          -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9}),
/* NxS[  12] */ new Table(0, 0, -1, null), // Shortest string "<mto:"
/* NxS[  13] */ // Shortest string "<a\thref="
      new Table(32, 8, -1, new sbyte[] {14, -1, 14, -1, -1, -1, 
          -1, 14}),
/* NxS[  14] */ new Table(0, 0, -1, null), // Shortest string "<a\thref=\x20"
/* NxS[  15] */ new Table(0, 0, -1, null), // Shortest string "</A\t"
/* NxS[  16] */ // Shortest string "<!A"
      new Table(48, 75, -1, new sbyte[] {16, 16, 16, 16, 16, 16, 
          16, 16, 16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 
          16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16, 16, 16, 16, 16, -1, -1, -1, -1, 16, -1, 16, 16, 16, 16, 16, 
          16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16, 16, 16, 16, 16}),
/* NxS[  17] */ new Table(0, 0, -1, null), // Shortest string "<!--"
/* NxS[  18] */ // Shortest string "$("
      new Table(40, 18, -1, new sbyte[] {18, -1, -1, -1, -1, -1, 
          18, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18}),
/* NxS[  19] */ // Shortest string "$A"
      new Table(65, 58, -1, new sbyte[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19}),
/* NxS[  20] */ new Table(0, 0, -1, null), // Shortest string "${A}"
/* NxS[  21] */ // Shortest string "/"
      new Table(36, 90, 1, new sbyte[] {-1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, -1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 26, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, -1, 1, -1}),
/* NxS[  22] */ // Shortest string "</mt"
      new Table(65, 58, -1, new sbyte[] {9, 9, 9, 9, 9, 9, 
          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
          9, 9, 9, 9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 
          9, 9, 9, 9, 9, 9, 9, 9, 23, 9, 9, 9, 9, 9, 9, 9, 
          9, 9, 9, 9}),
/* NxS[  23] */ // Shortest string "</mto"
      new Table(58, 65, -1, new sbyte[] {81, -1, -1, -1, -1, -1, 
          -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, -1, -1, -1, -1, -1, 
          -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9}),
/* NxS[  24] */ // Shortest string "</mto:A"
      new Table(62, 61, -1, new sbyte[] {25, -1, -1, 24, 24, 24, 
          24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 
          24, 24, 24, 24, 24, 24, 24, -1, -1, -1, -1, -1, -1, 24, 24, 24, 
          24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 
          24, 24, 24, 24, 24, 24, 24}),
/* NxS[  25] */ new Table(0, 0, -1, null), // Shortest string "</mto:A>"
/* NxS[  26] */ // Shortest string "/m"
      new Table(36, 90, 1, new sbyte[] {-1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 27, 1, 1, 1, 1, 1, 
          1, -1, 1, -1}),
/* NxS[  27] */ // Shortest string "/mt"
      new Table(36, 90, 1, new sbyte[] {-1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 28, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, -1, 1, -1}),
/* NxS[  28] */ // Shortest string "/mto"
      new Table(36, 90, 1, new sbyte[] {-1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          29, 1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, -1, 1, -1}),
/* NxS[  29] */ // Shortest string "/mto:"
      new Table(36, 90, 1, new sbyte[] {-1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, -1, 1, -1, 1, 1, 30, 30, 30, 30, 30, 30, 30, 30, 30, 
          30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 
          30, 1, 1, 1, 1, 1, 1, 30, 30, 30, 30, 30, 30, 30, 30, 30, 
          30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 
          30, -1, 1, -1}),
/* NxS[  30] */ // Shortest string "/mto:A"
      new Table(36, 90, 1, new sbyte[] {-1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, -1, 1, 31, 1, 1, 30, 30, 30, 30, 30, 30, 30, 30, 30, 
          30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 
          30, 1, 1, 1, 1, 1, 1, 30, 30, 30, 30, 30, 30, 30, 30, 30, 
          30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 
          30, -1, 1, -1}),
/* NxS[  31] */ new Table(0, 0, -1, null), // Shortest string "/mto:A>"
/* NxS[  32] */ // Shortest string "\t"
      new Table(9, 24, -1, new sbyte[] {32, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 32}),
/* NxS[  33] */ new Table(0, 0, -1, null), // Shortest string ">"
/* NxS[  34] */ // Shortest string "A=A"
      new Table(48, 75, -1, new sbyte[] {34, 34, 34, 34, 34, 34, 
          34, 34, 34, 34, -1, -1, -1, -1, -1, -1, -1, 34, 34, 34, 34, 34, 
          34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 
          34, 34, 34, 34, 34, -1, -1, -1, -1, 34, -1, 34, 34, 34, 34, 34, 
          34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 
          34, 34, 34, 34, 34}),
/* NxS[  35] */ new Table(0, 0, -1, null), // Shortest string "A='\x01'"
/* NxS[  36] */ new Table(0, 0, -1, null), // Shortest string "A=\"\x01\""
/* NxS[  37] */ new Table(0, 0, -1, null), // Shortest string "/>"
/* NxS[  38] */ // Shortest string "A"
      new Table(65, 58, -1, new sbyte[] {38, 38, 38, 38, 38, 38, 
          38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 
          38, 38, 38, 38, -1, -1, -1, -1, -1, -1, 38, 38, 38, 38, 38, 38, 
          38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 
          38, 38, 38, 38}),
/* NxS[  39] */ // Shortest string "\x01"
      new Table(45, 1, 39, new sbyte[] {-1}),
/* NxS[  40] */ // Shortest string "-\x01"
      new Table(45, 1, 40, new sbyte[] {-1}),
/* NxS[  41] */ new Table(0, 0, -1, null), // Shortest string "-->"
/* NxS[  42] */ // Shortest string "\x01"
      new Table(32, 94, 42, new sbyte[] {-1, 42, -1, 42, -1, 42, 
          42, -1, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 
          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 
          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 
          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 
          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 
          42, 42, 42, 42, 42, -1, 42, -1}),
/* NxS[  43] */ new Table(0, 0, -1, null), // Shortest string "${A}"
/* NxS[  44] */ // Shortest string "$"
      new Table(65, 58, -1, new sbyte[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19}),
/* NxS[  45] */ new Table(0, 0, -1, null), // Shortest string "("
/* NxS[  46] */ new Table(0, 0, -1, null), // Shortest string "."
/* NxS[  47] */ new Table(0, 0, -1, null), // Shortest string "("
/* NxS[  48] */ // Shortest string "A"
      new Table(65, 58, -1, new sbyte[] {48, 48, 48, 48, 48, 48, 
          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
          48, 48, 48, 48, -1, -1, -1, -1, -1, -1, 48, 48, 48, 48, 48, 48, 
          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
          48, 48, 48, 48}),
/* NxS[  49] */ // Shortest string "\x01"
      new Table(36, 6, 49, new sbyte[] {-1, 49, 49, 49, 49, -1}),
/* NxS[  50] */ new Table(0, 0, -1, null), // Shortest string ")"
/* NxS[  51] */ // Shortest string "\\"
      new Table(36, 6, 49, new sbyte[] {52, 49, 49, 49, 49, -1}),
/* NxS[  52] */ new Table(0, 0, -1, null), // Shortest string "\\$"
/* NxS[  53] */ new Table(0, 0, -1, null), // Shortest string ")"
/* NxS[  54] */ // Shortest string ""
      new Table(10, 116, 1, new sbyte[] {2, 1, 1, 3, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 55, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 56, 1, 5, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 57, 1, -1}),
/* NxS[  55] */ // Shortest string "$"
      new Table(9, 115, -1, new sbyte[] {73, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 73, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, 18, 
          -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, -1, -1, -1, -1, 
          -1, -1, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, -1, -1, -1, -1, 
          -1, -1, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 74}),
/* NxS[  56] */ // Shortest string "<"
      new Table(33, 90, -1, new sbyte[] {59, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 61, 62, 62, 62, 62, 62, 
          62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 
          62, 62, 62, 62, -1, -1, -1, -1, -1, -1, 63, 62, 62, 62, 62, 62, 
          62, 62, 62, 62, 62, 62, 64, 62, 62, 62, 62, 62, 62, 62, 65, 62, 
          62, 62, 62, 62}),
/* NxS[  57] */ // Shortest string "{"
      new Table(125, 1, 58, new sbyte[] {-1}),
/* NxS[  58] */ // Shortest string "{\x01"
      new Table(125, 1, 58, new sbyte[] {6}),
/* NxS[  59] */ // Shortest string "<!"
      new Table(45, 78, -1, new sbyte[] {72, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 
          16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16, 16, 16, 16, 16, 16, 16, 16, -1, -1, -1, -1, 16, -1, 16, 16, 
          16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16, 16, 16, 16, 16, 16, 16, 16}),
/* NxS[  60] */ // Shortest string "</"
      new Table(65, 58, -1, new sbyte[] {71, 62, 62, 62, 62, 62, 
          62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 
          62, 62, 62, 62, -1, -1, -1, -1, -1, -1, 71, 62, 62, 62, 62, 62, 
          62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 65, 62, 
          62, 62, 62, 62}),
/* NxS[  61] */ // Shortest string "<A"
      new Table(65, 58, -1, new sbyte[] {9, 9, 9, 9, 9, 9, 
          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
          9, 9, 9, 9, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 
          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
          9, 9, 9, 9}),
/* NxS[  62] */ // Shortest string "<B"
      new Table(9, 114, -1, new sbyte[] {7, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 
          -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, -1, -1, -1, -1, 
          -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9}),
/* NxS[  63] */ // Shortest string "<a"
      new Table(9, 114, -1, new sbyte[] {66, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, -1, -1, -1, -1, 
          -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9}),
/* NxS[  64] */ // Shortest string "<m"
      new Table(9, 114, -1, new sbyte[] {7, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 
          -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, -1, -1, -1, -1, 
          -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
          9, 9, 9, 9, 9, 10, 9, 9, 9, 9, 9, 9}),
/* NxS[  65] */ // Shortest string "<u"
      new Table(9, 114, -1, new sbyte[] {7, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 
          -1, -1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, -1, -1, 
          -1, -1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, -1, 8, 8, 8, 8, 8, 8, 8}),
/* NxS[  66] */ // Shortest string "<a\t"
      new Table(104, 1, 66, new sbyte[] {67}),
/* NxS[  67] */ // Shortest string "<a\th"
      new Table(114, 1, -1, new sbyte[] {68}),
/* NxS[  68] */ // Shortest string "<a\thr"
      new Table(101, 1, -1, new sbyte[] {69}),
/* NxS[  69] */ // Shortest string "<a\thre"
      new Table(102, 1, -1, new sbyte[] {70}),
/* NxS[  70] */ // Shortest string "<a\thref"
      new Table(9, 53, -1, new sbyte[] {70, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 70, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13}),
/* NxS[  71] */ // Shortest string "</A"
      new Table(9, 114, -1, new sbyte[] {15, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, 
          -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, -1, -1, -1, -1, 
          -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9}),
/* NxS[  72] */ // Shortest string "<!-"
      new Table(45, 1, -1, new sbyte[] {17}),
/* NxS[  73] */ // Shortest string "$\t"
      new Table(9, 49, -1, new sbyte[] {73, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 73, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, 18, 
          -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18}),
/* NxS[  74] */ // Shortest string "${"
      new Table(65, 58, -1, new sbyte[] {75, 75, 75, 75, 75, 75, 
          75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 
          75, 75, 75, 75, -1, -1, -1, -1, 75, -1, 75, 75, 75, 75, 75, 75, 
          75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 
          75, 75, 75, 75}),
/* NxS[  75] */ // Shortest string "${A"
      new Table(65, 61, -1, new sbyte[] {75, 75, 75, 75, 75, 75, 
          75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 
          75, 75, 75, 75, -1, -1, -1, -1, 75, -1, 75, 75, 75, 75, 75, 75, 
          75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 
          75, 75, 75, 75, -1, -1, 20}),
/* NxS[  76] */ // Shortest string ""
      new Table(10, 116, 1, new sbyte[] {2, 1, 1, 3, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 55, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 21, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 77, 1, 5, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 57, 1, -1}),
/* NxS[  77] */ // Shortest string "<"
      new Table(33, 90, -1, new sbyte[] {78, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 79, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 61, 62, 62, 62, 62, 62, 
          62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 
          62, 62, 62, 62, -1, -1, -1, -1, -1, -1, 63, 62, 62, 62, 62, 62, 
          62, 62, 62, 62, 62, 62, 64, 62, 62, 62, 62, 62, 62, 62, 65, 62, 
          62, 62, 62, 62}),
/* NxS[  78] */ // Shortest string "<!"
      new Table(45, 1, -1, new sbyte[] {72}),
/* NxS[  79] */ // Shortest string "</"
      new Table(65, 58, -1, new sbyte[] {71, 62, 62, 62, 62, 62, 
          62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 
          62, 62, 62, 62, -1, -1, -1, -1, -1, -1, 71, 62, 62, 62, 62, 62, 
          62, 62, 62, 62, 62, 62, 80, 62, 62, 62, 62, 62, 62, 62, 65, 62, 
          62, 62, 62, 62}),
/* NxS[  80] */ // Shortest string "</m"
      new Table(9, 114, -1, new sbyte[] {7, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 
          -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, -1, -1, -1, -1, 
          -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
          9, 9, 9, 9, 9, 22, 9, 9, 9, 9, 9, 9}),
/* NxS[  81] */ // Shortest string "</mto:"
      new Table(65, 58, -1, new sbyte[] {24, 24, 24, 24, 24, 24, 
          24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 
          24, 24, 24, 24, -1, -1, -1, -1, -1, -1, 24, 24, 24, 24, 24, 24, 
          24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 
          24, 24, 24, 24}),
/* NxS[  82] */ // Shortest string ""
      new Table(9, 114, -1, new sbyte[] {32, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          83, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33, 
          -1, -1, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 
          84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, -1, -1, -1, -1, 
          84, -1, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 
          84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84}),
/* NxS[  83] */ // Shortest string "/"
      new Table(62, 1, -1, new sbyte[] {37}),
/* NxS[  84] */ // Shortest string "A"
      new Table(48, 75, -1, new sbyte[] {84, 84, 84, 84, 84, 84, 
          84, 84, 84, 84, -1, -1, -1, 85, -1, -1, -1, 84, 84, 84, 84, 84, 
          84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 
          84, 84, 84, 84, 84, -1, -1, -1, -1, 84, -1, 84, 84, 84, 84, 84, 
          84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 
          84, 84, 84, 84, 84}),
/* NxS[  85] */ // Shortest string "A="
      new Table(34, 89, -1, new sbyte[] {86, -1, -1, -1, -1, 87, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, 34, 34, 34, 34, 34, 34, 
          34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 
          34, 34, 34, -1, -1, -1, -1, 34, -1, 34, 34, 34, 34, 34, 34, 34, 
          34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 
          34, 34, 34}),
/* NxS[  86] */ // Shortest string "A=\""
      new Table(34, 59, 91, new sbyte[] {-1, 91, 91, 91, 91, 91, 
          91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 
          91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 
          91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 
          91, 91, 91, 91, -1}),
/* NxS[  87] */ // Shortest string "A='"
      new Table(39, 54, 88, new sbyte[] {-1, 88, 88, 88, 88, 88, 
          88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 
          88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 
          88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, -1}),
/* NxS[  88] */ // Shortest string "A='\x01"
      new Table(39, 54, 88, new sbyte[] {35, 88, 88, 88, 88, 88, 
          88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 
          88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 
          88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 89}),
/* NxS[  89] */ // Shortest string "A='\x01\\"
      new Table(39, 1, -1, new sbyte[] {90}),
/* NxS[  90] */ // Shortest string "A='\x01\\'"
      new Table(39, 54, 88, new sbyte[] {35, 88, 88, 88, 88, 88, 
          88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 
          88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 
          88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, -1}),
/* NxS[  91] */ // Shortest string "A=\"\x01"
      new Table(34, 59, 91, new sbyte[] {36, 91, 91, 91, 91, 91, 
          91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 
          91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 
          91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 
          91, 91, 91, 91, 92}),
/* NxS[  92] */ // Shortest string "A=\"\x01\\"
      new Table(34, 1, -1, new sbyte[] {93}),
/* NxS[  93] */ // Shortest string "A=\"\x01\\\""
      new Table(34, 59, 91, new sbyte[] {36, 91, 91, 91, 91, 91, 
          91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 
          91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 
          91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 
          91, 91, 91, 91, -1}),
/* NxS[  94] */ // Shortest string ""
      new Table(65, 58, -1, new sbyte[] {38, 38, 38, 38, 38, 38, 
          38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 
          38, 38, 38, 38, -1, -1, -1, -1, -1, -1, 38, 38, 38, 38, 38, 38, 
          38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 
          38, 38, 38, 38}),
/* NxS[  95] */ // Shortest string ""
      new Table(45, 1, 39, new sbyte[] {96}),
/* NxS[  96] */ // Shortest string "-"
      new Table(45, 1, 40, new sbyte[] {97}),
/* NxS[  97] */ // Shortest string "--"
      new Table(62, 1, -1, new sbyte[] {41}),
/* NxS[  98] */ // Shortest string ""
      new Table(32, 94, 42, new sbyte[] {-1, 42, -1, 42, 99, 42, 
          42, -1, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 
          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 
          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 
          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 
          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 
          42, 42, 42, 42, 42, -1, 42, -1}),
/* NxS[  99] */ // Shortest string "$"
      new Table(123, 1, -1, new sbyte[] {100}),
/* NxS[ 100] */ // Shortest string "${"
      new Table(65, 31, -1, new sbyte[] {101, 101, 101, 101, 101, 101, 
          101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 
          101, 101, 101, 101, -1, -1, -1, -1, 101}),
/* NxS[ 101] */ // Shortest string "${A"
      new Table(65, 61, -1, new sbyte[] {101, 101, 101, 101, 101, 101, 
          101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 
          101, 101, 101, 101, -1, -1, -1, -1, 101, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 43}),
/* NxS[ 102] */ // Shortest string ""
      new Table(36, 11, -1, new sbyte[] {44, -1, -1, -1, 45, -1, 
          -1, -1, -1, -1, 46}),
/* NxS[ 103] */ // Shortest string ""
      new Table(40, 1, -1, new sbyte[] {47}),
/* NxS[ 104] */ // Shortest string ""
      new Table(65, 58, -1, new sbyte[] {48, 48, 48, 48, 48, 48, 
          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
          48, 48, 48, 48, -1, -1, -1, -1, -1, -1, 48, 48, 48, 48, 48, 48, 
          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
          48, 48, 48, 48}),
/* NxS[ 105] */ // Shortest string ""
      new Table(36, 57, 49, new sbyte[] {106, 49, 49, 49, 49, 50, 
          49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 
          49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 
          49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 
          49, 49, 51}),
/* NxS[ 106] */ // Shortest string "$"
      new Table(65, 58, -1, new sbyte[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19}),
/* NxS[ 107] */ // Shortest string ""
      new Table(36, 57, 49, new sbyte[] {106, 49, 49, 49, 49, 53, 
          49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 
          49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 
          49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 
          49, 49, 51}),
    };

int NextState() {
    if (code == ScanBuff.EndOfFile)
        return eofNum;
    else
        unchecked {
            int rslt;
            int idx = (byte)(code - NxS[state].min);
            if ((uint)idx >= (uint)NxS[state].rng) rslt = NxS[state].dflt;
            else rslt = NxS[state].nxt[idx];
            return rslt;
        }
}

#endregion


#if BACKUP
        // ==============================================================
        // == Nested struct used for backup in automata that do backup ==
        // ==============================================================

        struct Context // class used for automaton backup.
        {
            public int bPos;
            public int rPos; // scanner.readPos saved value
            public int cCol;
            public int lNum; // Need this in case of backup over EOL.
            public int state;
            public int cChr;
        }
        
        private Context ctx = new Context();
#endif // BACKUP

        // ==============================================================
        // ==== Nested struct to support input switching in scanners ====
        // ==============================================================

		struct BufferContext {
            internal ScanBuff buffSv;
			internal int chrSv;
			internal int cColSv;
			internal int lNumSv;
		}

        // ==============================================================
        // ===== Private methods to save and restore buffer contexts ====
        // ==============================================================

        /// <summary>
        /// This method creates a buffer context record from
        /// the current buffer object, together with some
        /// scanner state values. 
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        BufferContext MkBuffCtx()
		{
			BufferContext rslt;
			rslt.buffSv = this.buffer;
			rslt.chrSv = this.code;
			rslt.cColSv = this.cCol;
			rslt.lNumSv = this.lNum;
			return rslt;
		}

        /// <summary>
        /// This method restores the buffer value and allied
        /// scanner state from the given context record value.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void RestoreBuffCtx(BufferContext value)
		{
			this.buffer = value.buffSv;
			this.code = value.chrSv;
			this.cCol = value.cColSv;
			this.lNum = value.lNumSv;
        } 
        // =================== End Nested classes =======================

#if !NOFILES
     public Scanner(Stream file) {
            SetSource(file); // no unicode option
        }
        
#endif // !NOFILES

     public Scanner() { }

        private int readPos;

        void GetCode()
        {
            if (code == '\n')  // This needs to be fixed for other conventions
                               // i.e. [\r\n\205\u2028\u2029]
            { 
                cCol = -1;
                lNum++;
            }
            readPos = buffer.Pos;

            // Now read new codepoint.
            code = buffer.Read();
            if (code > ScanBuff.EndOfFile)
            {
#if (!BYTEMODE)
                if (code >= 0xD800 && code <= 0xDBFF)
                {
                    int next = buffer.Read();
                    if (next < 0xDC00 || next > 0xDFFF)
                        code = ScanBuff.UnicodeReplacementChar;
                    else
                        code = (0x10000 + (code & 0x3FF << 10) + (next & 0x3FF));
                }
#endif
                cCol++;
            }
        }

        void MarkToken()
        {
#if (!PERSIST)
            buffer.Mark();
#endif
            tokPos = readPos;
            tokLin = lNum;
            tokCol = cCol;
        }
        
        void MarkEnd()
        {
            tokTxt = null;
            tokEPos = readPos;
            tokELin = lNum;
            tokECol = cCol;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int Peek()
        {
            int rslt, codeSv = code, cColSv = cCol, lNumSv = lNum, bPosSv = buffer.Pos;
            GetCode(); rslt = code;
            lNum = lNumSv; cCol = cColSv; code = codeSv; buffer.Pos = bPosSv;
            return rslt;
        }

        // ==============================================================
        // =====    Initialization of string-based input buffers     ====
        // ==============================================================

        /// <summary>
        /// Create and initialize a StringBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the input string</param>
        /// <param name="offset">starting offset in the string</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(string source, int offset)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.buffer.Pos = offset;
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }

#if !NOFILES        
        // ================ LineBuffer Initialization ===================

        /// <summary>
        /// Create and initialize a LineBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the list of input strings</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(IList<string> source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            this.lNum = 0;
            GetCode();
        }

        // =============== StreamBuffer Initialization ==================

        /// <summary>
        /// Create and initialize a StreamBuff buffer object for this scanner.
        /// StreamBuff is buffer for 8-bit byte files.
        /// </summary>
        /// <param name="source">the input byte stream</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
        
#if !BYTEMODE
        // ================ TextBuffer Initialization ===================

        /// <summary>
        /// Create and initialize a TextBuff buffer object for this scanner.
        /// TextBuff is a buffer for encoded unicode files.
        /// </summary>
        /// <param name="source">the input text file</param>
        /// <param name="fallbackCodePage">Code page to use if file has
        /// no BOM. For 0, use machine default; for -1, 8-bit binary</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source, int fallbackCodePage)
        {
            this.buffer = ScanBuff.GetBuffer(source, fallbackCodePage);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
#endif // !BYTEMODE
#endif // !NOFILES
        
        // ==============================================================

#if BABEL
        //
        //  Get the next token for Visual Studio
        //
        //  "state" is the inout mode variable that maintains scanner
        //  state between calls, using the EolState property. In principle,
        //  if the calls of EolState are costly set could be called once
        //  only per line, at the start; and get called only at the end
        //  of the line. This needs more infrastructure ...
        //
        public int GetNext(ref int state, out int start, out int end)
        {
                Tokens next;
            int s, e;
            s = state;        // state at start
            EolState = state;
                next = (Tokens)Scan();
            state = EolState;
            e = state;       // state at end;
            start = tokPos;
            end = tokEPos - 1; // end is the index of last char.
            return (int)next;
        }        
#endif // BABEL

        // ======== AbstractScanner<> Implementation =========

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public override int yylex()
        {
            // parserMax is set by reflecting on the Tokens
            // enumeration.  If maxParseToken is defined
            // that is used, otherwise int.MaxValue is used.
            int next;
            do { next = Scan(); } while (next >= parserMax);
            return next;
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yypos { get { return tokPos; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yyline { get { return tokLin; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yycol { get { return tokCol; } }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yytext")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yytext")]
        public string yytext
        {
            get 
            {
                if (tokTxt == null) 
                    tokTxt = buffer.GetString(tokPos, tokEPos);
                return tokTxt;
            }
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void yyless(int n)
        {
            buffer.Pos = tokPos;
            // Must read at least one char, so set before start.
            cCol = tokCol - 1; 
            GetCode();
            // Now ensure that line counting is correct.
            lNum = tokLin;
            // And count the rest of the text.
            for (int i = 0; i < n; i++) GetCode();
            MarkEnd();
        }
       
        //
        //  It would be nice to count backward in the text
        //  but it does not seem possible to re-establish
        //  the correct column counts except by going forward.
        //
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void _yytrunc(int n) { yyless(yyleng - n); }
        
        //
        // This is painful, but we no longer count
        // codepoints.  For the overwhelming majority 
        // of cases the single line code is fast, for
        // the others, well, at least it is all in the
        // buffer so no files are touched. Note that we
        // can't use (tokEPos - tokPos) because of the
        // possibility of surrogate pairs in the token.
        //
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yyleng")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yyleng")]
        public int yyleng
        {
            get
            {
                if (tokELin == tokLin)
                    return tokECol - tokCol;
                else
                {
                    int ch;
                    int count = 0;
                    buffer.Pos = tokPos;
                    do
                    {
                        ch = buffer.Read();
                        if (!char.IsHighSurrogate((char)ch)) count++;
                    } while (buffer.Pos < tokEPos && ch != ScanBuff.EndOfFile); 
                    return count;
                }
            }
        }
        
        // ============ methods available in actions ==============

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int YY_START {
            get { return currentScOrd; }
            set { currentScOrd = value; 
                  currentStart = startState[value]; 
            } 
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void BEGIN(int next) {
            currentScOrd = next;
            currentStart = startState[next];
        }

        // ============== The main tokenizer code =================

        int Scan()
        {
                for (; ; )
                {
                    int next;              // next state to enter                   
#if BACKUP
                    Result rslt = Result.noMatch;
#endif // BACKUP
#if LEFTANCHORS
                    for (;;)
                    {
                        // Discard characters that do not start any pattern.
                        // Must check the left anchor condition after *every* GetCode!
                        state = ((cCol == 0) ? anchorState[currentScOrd] : currentStart);
                        if ((next = NextState()) != goStart) 
                            break; // LOOP EXIT HERE...
                        GetCode();
                    }
                    
#else // !LEFTANCHORS
                    state = currentStart;
                    while ((next = NextState()) == goStart)
                        // At this point, the current character has no
                        // transition from the current state.  We discard 
                        // the "no-match" char.   In traditional LEX such 
                        // characters are echoed to the console.
                        GetCode();
#endif // LEFTANCHORS                    
                    // At last, a valid transition ...    
                    MarkToken();
                    state = next;
                    GetCode();
                    
                    while ((next = NextState()) > eofNum) // Exit for goStart AND for eofNum
#if BACKUP
                        if (state <= maxAccept && next > maxAccept) // need to prepare backup data
                        {
                            // ctx is an object. The fields may be 
                            // mutated by the call to Recurse2.
                            // On return the data in ctx is the
                            // *latest* accept state that was found.
                            
                            rslt = Recurse2(ref ctx, next);
                            if (rslt == Result.noMatch) 
                                RestoreStateAndPos(ref ctx);
                            break;
                        }
                        else
#endif // BACKUP
                        {
                            state = next;
                            GetCode();
                        }
                    if (state <= maxAccept) 
                    {
                        MarkEnd();
#region ActionSwitch
#pragma warning disable 162
    switch (state)
    {
        case eofNum:
            switch (currentStart) {
                case 54:
this.AddToken(Tokens.EOF, yytext);
                    break;
            }
            if (yywrap())
                return (int)Tokens.EOF;
            break;
        case 1: // Recognized '[^\$<>\{\}]+',	Shortest string "\x01"
        case 4: // Recognized '[^\$<>\{\}]+',	Shortest string "/"
        case 21: // In <TAG> Recognized '[^\$<>\{\}]+',	Shortest string "/"
        case 26: // In <TAG> Recognized '[^\$<>\{\}]+',	Shortest string "/m"
        case 27: // In <TAG> Recognized '[^\$<>\{\}]+',	Shortest string "/mt"
        case 28: // In <TAG> Recognized '[^\$<>\{\}]+',	Shortest string "/mto"
        case 29: // In <TAG> Recognized '[^\$<>\{\}]+',	Shortest string "/mto:"
        case 30: // In <TAG> Recognized '[^\$<>\{\}]+',	Shortest string "/mto:A"
this.AddToken(Tokens.Content, yytext);
            break;
        case 2: // Recognized '{EOL}',	Shortest string "\n"
        case 3: // Recognized '{EOL}',	Shortest string "\r"
this.AddToken(Tokens.NewLine, yytext);
            break;
        case 5: // Recognized '(\/)?\>',	Shortest string ">"
this.AddToken(Tokens.CloseMtoTag, yytext);
            break;
        case 6: // Recognized '\{[^\}]+\}',	Shortest string "{\x01}"
this.AddToken(Tokens.Content, yytext);
            break;
        case 7: // Recognized '\<(\/)?[B-Zb-z][\t \>]',	Shortest string "<B\t"
this.AddToken(Tokens.Content, yytext);
            break;
        case 8: // Recognized '\<(\/)?u[A-Za-rt-z][A-Za-z]*',	Shortest string "<uA"
this.AddToken(Tokens.Content, yytext);
            break;
        case 9: // Recognized '\<(\/)?[A-Za-tv-z][A-Za-z]+',	Shortest string "<AA"
        case 10: // Recognized '\<(\/)?[A-Za-tv-z][A-Za-z]+',	Shortest string "<mt"
        case 11: // Recognized '\<(\/)?[A-Za-tv-z][A-Za-z]+',	Shortest string "<mto"
        case 22: // In <TAG> Recognized '\<(\/)?[A-Za-tv-z][A-Za-z]+',	Shortest string "</mt"
        case 23: // In <TAG> Recognized '\<(\/)?[A-Za-tv-z][A-Za-z]+',	Shortest string "</mto"
this.AddToken(Tokens.Content, yytext);
            break;
        case 12: // Recognized '\<mto:',	Shortest string "<mto:"
this.AddToken(Tokens.OpenMtoTag, yytext); yy_push_state(TAG); yy_push_state(TAG_NAME);
            break;
        case 13: // Recognized '\<a[ \t]+[^h]*href[ \t]*=[\"\' ]?',	Shortest string "<a\thref="
        case 14: // Recognized '\<a[ \t]+[^h]*href[ \t]*=[\"\' ]?',	Shortest string "<a\thref=\x20"
this.AddToken(Tokens.Content, yytext); yy_push_state(URL);
            break;
        case 15: // Recognized '\<\/[Aa][\t \>]',	Shortest string "</A\t"
this.AddToken(Tokens.Content, yytext);
            break;
        case 16: // Recognized '\<\!{Ident}+',	Shortest string "<!A"
this.AddToken(Tokens.Content, yytext);
            break;
        case 17: // Recognized '\<\!\-\-',	Shortest string "<!--"
this.AddToken(Tokens.CommentStart, yytext); yy_push_state(COMMENT);
            break;
        case 18: // Recognized '\$[ \t]*[0-9\.\(]+',	Shortest string "$("
this.AddToken(Tokens.Content, yytext);
            break;
        case 19: // Recognized '\$[a-zA-Z]+',	Shortest string "$A"
this.AddToken(Tokens.OpenCommand, yytext.Substring(1, yytext.Length -1)); yy_push_state(COMMAND);
            break;
        case 20: // Recognized '\$\{[A-Za-z_]+\}',	Shortest string "${A}"
this.AddToken(Tokens.Property, yytext.Substring(2, yytext.Length -3));
            break;
        case 24: // In <TAG> Recognized '\<\/mto:[A-Za-z]+(\>)?',	Shortest string "</mto:A"
        case 25: // In <TAG> Recognized '\<\/mto:[A-Za-z]+(\>)?',	Shortest string "</mto:A>"
this.AddToken(Tokens.CloseMtoTag, yytext.Substring(6, yytext.Length - 7)); yy_pop_state();
            break;
        case 31: // In <TAG> Recognized '\/mto:[A-Za-z]+(\>)?',	Shortest string "/mto:A>"
this.AddToken(Tokens.CloseMtoTag, yytext.Substring(5, yytext.Length - 6)); yy_pop_state();
            break;
        case 32: // In <TAG_ARG> Recognized '[ \t]+',	Shortest string "\t"
{  }
            break;
        case 33: // In <TAG_ARG> Recognized '\>',	Shortest string ">"
this.AddToken(Tokens.TagCloseArg, yytext); yy_pop_state();
            break;
        case 34: // In <TAG_ARG> Recognized '{Ident}={Ident}',	Shortest string "A=A"
this.AddToken(Tokens.TagArg, yytext);
            break;
        case 35: // In <TAG_ARG> Recognized '{Ident}={StringSQ}',	Shortest string "A='\x01'"
this.AddToken(Tokens.TagArg, yytext);
            break;
        case 36: // In <TAG_ARG> Recognized '{Ident}={StringDQ}',	Shortest string "A=\"\x01\""
this.AddToken(Tokens.TagArg, yytext);
            break;
        case 37: // In <TAG_ARG> Recognized '/\>',	Shortest string "/>"
this.AddToken(Tokens.CloseMtoTag, yytext); yy_pop_state(); yy_pop_state();
            break;
        case 38: // In <TAG_NAME> Recognized '[A-Za-z]+',	Shortest string "A"
this.AddToken(Tokens.TagName, yytext); yy_pop_state(); yy_push_state(TAG_ARG);
            break;
        case 39: // In <COMMENT> Recognized '[^\-]+',	Shortest string "\x01"
this.AddToken(Tokens.Content, yytext);
            break;
        case 40: // In <COMMENT> Recognized '\-[^\-]+',	Shortest string "-\x01"
this.AddToken(Tokens.Content, yytext);
            break;
        case 41: // In <COMMENT> Recognized '\-\-\>',	Shortest string "-->"
this.AddToken(Tokens.CommentEnd, yytext); yy_pop_state();
            break;
        case 42: // In <URL> Recognized '[^ \"\'\{\$\}]+',	Shortest string "\x01"
this.AddToken(Tokens.Url, yytext); yy_pop_state();
            break;
        case 43: // In <URL> Recognized '\$\{[A-Z_]+\}',	Shortest string "${A}"
this.AddToken(Tokens.Property, yytext.Substring(2, yytext.Length -3)); yy_pop_state();
            break;
        case 44: // In <COMMAND> Recognized '\$',	Shortest string "$"
this.AddToken(Tokens.CloseCommand, yytext); yy_pop_state();
            break;
        case 45: // In <COMMAND> Recognized '\(',	Shortest string "("
this.AddToken(Tokens.OpenCommandContent, yytext); yy_push_state(COMMAND_CONTENT);
            break;
        case 46: // In <COMMAND> Recognized '\.',	Shortest string "."
this.AddToken(Tokens.OpenCommandArg, yytext); yy_push_state(COMMAND_ARG); yy_push_state(COMMAND_ARG_NAME);
            break;
        case 47: // In <COMMAND_ARG> Recognized '\(',	Shortest string "("
this.AddToken(Tokens.OpenComandArgValue, yytext); yy_push_state(COMMAND_ARG_VALUE);
            break;
        case 48: // In <COMMAND_ARG_NAME> Recognized '[a-zA-Z]+',	Shortest string "A"
this.AddToken(Tokens.Content, yytext); yy_pop_state();
            break;
        case 49: // In <COMMAND_ARG_VALUE> Recognized '[^\)\$]+',	Shortest string "\x01"
        case 51: // In <COMMAND_ARG_VALUE> Recognized '[^\)\$]+',	Shortest string "\\"
this.AddToken(Tokens.Content, yytext);
            break;
        case 50: // In <COMMAND_ARG_VALUE> Recognized '\)',	Shortest string ")"
this.AddToken(Tokens.CloseCommandContent, yytext); yy_pop_state(); yy_pop_state();
            break;
        case 52: // In <COMMAND_ARG_VALUE> Recognized '\\\$',	Shortest string "\\$"
this.AddToken(Tokens.Content, "$");
            break;
        case 53: // In <COMMAND_CONTENT> Recognized '\)',	Shortest string ")"
this.AddToken(Tokens.CloseCommandContent, yytext); yy_pop_state();
            break;
        default:
            break;
    }
#pragma warning restore 162
#endregion
                    }
                }
        }

#if BACKUP
        Result Recurse2(ref Context ctx, int next)
        {
            // Assert: at entry "state" is an accept state AND
            //         NextState(state, code) != goStart AND
            //         NextState(state, code) is not an accept state.
            //
            SaveStateAndPos(ref ctx);
            state = next;
            GetCode();

            while ((next = NextState()) > eofNum)
            {
                if (state <= maxAccept && next > maxAccept) // need to update backup data
                    SaveStateAndPos(ref ctx);
                state = next;
                if (state == eofNum) return Result.accept;
                GetCode(); 
            }
            return (state <= maxAccept ? Result.accept : Result.noMatch);
        }

        void SaveStateAndPos(ref Context ctx)
        {
            ctx.bPos  = buffer.Pos;
            ctx.rPos  = readPos;
            ctx.cCol  = cCol;
            ctx.lNum  = lNum;
            ctx.state = state;
            ctx.cChr  = code;
        }

        void RestoreStateAndPos(ref Context ctx)
        {
            buffer.Pos = ctx.bPos;
            readPos = ctx.rPos;
            cCol  = ctx.cCol;
            lNum  = ctx.lNum;
            state = ctx.state;
            code  = ctx.cChr;
        }

#endif // BACKUP

        // ============= End of the tokenizer code ================

#if STACK        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void yy_clear_stack() { scStack.Clear(); }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int yy_top_state() { return scStack.Peek(); }
        
        internal void yy_push_state(int state)
        {
            scStack.Push(currentScOrd);
            BEGIN(state);
        }
        
        internal void yy_pop_state()
        {
            // Protect against input errors that pop too far ...
            if (scStack.Count > 0) {
				int newSc = scStack.Pop();
				BEGIN(newSc);
            } // Otherwise leave stack unchanged.
        }
 #endif // STACK

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void ECHO() { Console.Out.Write(yytext); }
        
#region UserCodeSection

public override int CurrentPosition 
	 { 
		get { return yypos; }
     }

     /// <summary>
     /// Coluna do scanner
     /// </summary>
     public override int CurrentColumn 
	 { 
		get { return yycol; }
     }

     /// <summary>
     /// Coluna atual do scanner
     /// </summary>
     public override int CurrentLine 
	 { 
	    get { return yyline; }
     }

     /// <summary>
     /// Estado atual do scanner
     /// </summary>
    public override StartEnum CurrentStart 
	 { 
	   get { return (StartEnum)YY_START; }
     }


     /// <summary>
     /// Processa conteudo
     /// </summary> 	 
	public static TokenList ParseString(string content)
	{
	    var scnr = new Scanner();
	    scnr.SetSource(content, 0);
	    while (scnr.yylex() != (int)Tokens.EOF)
	    {
	    }

	    return scnr.TokenOutput;
	}

#endregion
    } // end class $Scanner


} // end namespace
